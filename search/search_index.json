{"config":{"lang":["en"],"separator":"[\\s\\-]+"},"docs":[{"title":"The Ruminer Palais","text":"<p>Welcome to Ruminer, my Digital Garden where I document my ruminations. Ruminer Palais in French loosely translates to \"ruminate palace\". This is my corner of the internet where I write about Machine Learning, Programming, Productivity and opinionated pieces on Lifestyle, Technology, Sports and other things that call my attention.</p> <p>Staying true to the idea of Digital Gardens, articles on this website can be considered as plants that are growing continuously. Articles are in various stages of growth- some polished, some rough ideas and everything in between- as I tend to them with time. The goal is to construct my ideas, ruminate, capture what I learn, and share them with you in a navigable archive.</p> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be expressed in Markdown.</li> </ol>","location":""},{"title":"About","text":"<p>I am Rishikanth Chandrasekaran, a CSE PhD Student at the University of California, San Diego. Prior to joining UCSD I completed my Masters in Computer Engineering at Columbia University, New York.</p> <p>I spend most of my time musing over Deep Learning models. My research focuses on exploiting the synergy between Deep Learning and Hyperdimensional Computing to enable lightweight learning for various domains such as Meta Learning, Federated Learning, Computer Vision and NLP.</p>","location":"about/"},{"title":"SKILLS","text":"<p></p>","location":"about/#skills"},{"title":"Tags","text":"<p>Following is a list of relevant tags:</p>","location":"tags/"},{"title":"Productivity","text":"<ul> <li>Procrastination as a productivity hack</li> <li>My Development Setup</li> </ul>","location":"tags/#productivity"},{"title":"Programming","text":"<ul> <li>Structuring a Python project</li> </ul>","location":"tags/#programming"},{"title":"Tips","text":"<ul> <li>Google search tricks</li> </ul>","location":"tags/#tips"},{"title":"productivity","text":"<ul> <li>Tracking time spent</li> </ul>","location":"tags/#productivity_1"},{"title":"Guide to grad school","text":"<p>Once in a while, I think about my early grad school days, coming to the US fresh after undergrad, excited at the idea of exploring a new country and learning new things. If you are from India like me, the first thing you would notice is the distinct differences in the learning system between the US and India. Barring the IITs, NITs and  other premier institutions, the Indian college system is very unlike the US system. Transitioning from the Indian learning system to the more rigorous US one might be jarring and at times a little overwhelming. In this article, I dip into my grad school experience to provide some pointers to new students. Things I wish I had known when I began my studies.</p>","location":"grad-school/guide-to-grad-school/"},{"title":"Follow thy seniors until thou become one","text":"<p>Seniors are your best resources. They have completed a year of the journey that you are about to set forth on. They know everything from where to buy Indian groceries  to what courses to choose. Don't be shy to reach out. There will invariably be social media groups with seniors well before you arrive on campus. Reach out to them  immediately after admits.</p> <p>Learn about the immigration and VISA process. Ask them about on campus housing. Lots of schools have waitlists several months long and you will most certainly not be aware of this until it's too late. Get to know what to bring. If you are living by yourself for the first time like me, you wouldn't know certain practical gems. For eg. the number of pairs of underwears you have determines your laundry cycle. You will save yourself a lot of pain and time by talking to them. </p>","location":"grad-school/guide-to-grad-school/#follow-thy-seniors-until-thou-become-one"},{"title":"Path to Graduation","text":"<p>The way I see it you go down one of two available paths to graduation: 1. Shortest path to graduation. Depending on your personal situation you might want to be done with grad school and take up a job ASAP.  2. The nerd life. You want to learn everything possible from your degree or pursue further studies.</p> <p>Both paths require you to take a combination of hard and easy courses, with the 2nd path having more of the hard ones. Set your eyes on the ball and decide which way you are going to go. Either is fine but don't get caught with your pants down in the middle. Play to your strengths and needs. If you go option 1, focus more on preparing for your interviews and  job/internship search. Keep your coursework light and take only the essential courses needed to graduate. Option 2, pace yourself well and plan your coursework ahead. If you're  planning to pursue a post-graduate degree start pursuing research opportunities with professors. This will help get you some publications and LoRs which are needed for school  applications.</p>","location":"grad-school/guide-to-grad-school/#path-to-graduation"},{"title":"Coursework","text":"<p>Like I said above, first talk to your seniors about coursework. Take a look at your degree requirements. You will have certain course requirements for graduation.  Several of these courses are  offered only during certain terms, like Fall, Winter etc. Courses will vary in difficulty and you may not be able to avoid all the difficult ones due to mandatory requirements.  Additionally you might have pre-requistes for certain courses which you should have finished prior. You might want to distribute your course load through out the year to accommodate these constraints. That's one tricky maze to navigate which your seniors have the map for. Plan your courses keeping these constraints in mind. </p> <p>Always take the first semester/quarter  easy. Remember you are new to this system. Take the time to adjust. The option 2 people will have the urge to start with all the good/difficult courses. DONT. You don't have to die the first term itself. There will be plenty of opportunities for that later :P If you are in doubt, you have the option to audit courses. Typically you will have a deadline to drop courses in the first 3 weeks. Enroll in multiple courses(to keep your options open), verify you can commit to the course load and accordingly pick.</p>","location":"grad-school/guide-to-grad-school/#coursework"},{"title":"On Assignments","text":"<p>Depending on the course and professor, the type of assignments will vary. A few broad combos would be: - Combination of bi-weekly / weekly assignment with exams (Midterm and or a Final) - Review / discussion oriented (You will read papers, present and discuss them) - Seminar courses - Project oriented (You will take on a semester/quarter long project which you will implement in parts) - Only assignments and or a final project</p> <p>The assignments can be theoretical, programming oriented or design oriented depending on the course you take. If your school follows the quarter system, your assignments are going to be flying out constantly whereas the semester system enjoys a more relaxed schedule but with increased difficulty. Assignments are usually a little out of your immediate reach and  meant for you to sweat a little to finish. Each course will have a Teaching Assistant (TA) whom you can approach and ask questions via dedicated channels. Make use of them. Please don't go to them asking for answers directly. You're more likely to annoy them that way. Try till you're stuck on something and then go to them for guidance.</p> <p>Each university will have their own signature courses which recruiters often know off. Taking these courses will boost your profile. You will learn the most from the difficult courses. Don't worry too much about your GPA. I don't even put my GPA on my CV. If you are looking for jobs a 3.5 is sufficient for all practical purposes as the only thing that matters is your performance in the coding round (more on that later). So focus more on interview prep. If you are looking to pursue higher studies, having a good GPA definitely helps. However having a research portfolio matters more. So you kind of need to optimize for both.</p> <p>Find course buddies to collaborate with and teach each other. You will often be surprised by how much you learn from your peers. A note on collaboration. All schools in the US take plagiarism seriously with consequences ranging from getting a zero in the assignment to getting thrown out. It's better to botch an assignment than get caught for plagiarism. Don't  think you're too smart. There are highly efficient tools for checking plagiarism like MOSS that can see past changing variable names and refactoring code.</p>","location":"grad-school/guide-to-grad-school/#on-assignments"},{"title":"On Internships/Job Search","text":"<p>By the time you arrive on campus it's already internship season. Most companies open positions starting early September. Look out for jobs online and apply. It's a game of numbers. The only control you have is in drafting your resume. Make your resume stand out. I would suggest from personal experience to design your own layout from scratch. Try to get creative. Your efforts will pay off. You might be good at what you do but if you don't get a foot into the door you will never get to show your potential. Your resume is the key to get you in. Recruiters spend on average ~7 seconds reviewing your resume. In this limited time, you need to draw their attention to your most important work/skills. Use bold fonts for important keywords or contributions. Don't be afraid to use colors in you resume/CV and don't go overboard. Black and white resumes were the norm to keep things printer-friendly. This is the digital era. No one reviews hard copies anymore. So go ahead and make your resume pop. Fine-tune your resume to each job/role you are applying for.</p> <p>NOTE: make your resume parsable. It's very common for companies to use an automated screening procedure that looks for keywords related to the job in your resume. Use relevant keywords accordingly. To check if your resume is parsable do a quick search on the pdf for a specific word.</p> <p>Most universities have a career center that offers free resume tips and a portal to job applications. There will be plenty of career fairs and job talks. Go to all of them and network to get the contacts of recruiters. Follow up with them immediately after the event with your resume and a brief  email selling yourself. Shamelessly follow and email recruiters on LinkedIn. </p> <p>The job/internship process is a game of numbers with an average conversion rate of 20%. If you apply for 100 jobs you will probably get interviews for 20 of them. So the more you apply the better your chances. When scheduling interviews prioritize in reverse keeping the preferred companies later. All the interviews before the targetted ones will be practice sessions. The more you give interviews the better you will get at it. When preparing for interviews focus on clearly expressing your thinking process. Most companies focus on your ability to  think and reason more than on you arriving at the solution. Sometimes problems are intentionally open-ended to gauge your critical thinking. So don't hesitate to ask questions.</p> <p>If you are looking for jobs in anything software related, be prepared for the algorithmic coding interview round. Start preparing on LeetCode. Irrespective of whether you are applying for a ML job or a software engineering job your first round will be the algorithm round. Practice solving leetcode questions whenever you get the time. Discipline pays off. Cracking interviews is about consistent incremental practice and not like an exam you study for the previous night. It's alright if you face a few rejections. Each interview experience helps you improve. Don't loose heart if you hit a few rejects or don't end up finding an internship. You will eventually end up finding a job. Everyone does :)</p>","location":"grad-school/guide-to-grad-school/#on-internshipsjob-search"},{"title":"Accommodation","text":"<p>Talk to your seniors. As soon as you get your admit immediately check up on campus housing. Most schools that offer on-campus subsidised housing will have ridiculously long waitlists. If on-campus housing is not a viable option talk to your seniors to find hotspot student communities in and around campus. When looking for houses, prioritize safety, travel logistics and proximity to grocery and other essential needs in that order. Don't go too far just because it's cheaper. Grad school will require you to spend odd hours on campus and you need to  have safe transportation at all times. Especially in places with inclement weather, travel is an important factor. Try to find houses with in-house or in-building laundry. You don't want to end up rolling a suitcase full of unwashed clothes down the street on a cold winter day.</p> <p>Find roomates that you can tolerate at the minimum. Don't be afraid to interview potentials if need be. You will end up spending a lot of time with each other and your lifestyles need to be compatible. You don't want to deal with additional drama in your house apart from the TV show that your life is going to be :P</p>","location":"grad-school/guide-to-grad-school/#accommodation"},{"title":"Eating to Live","text":"<p>As international students we have limited funds every month. Food will be your biggest expense after rent and cooking will help you save. Idealize the one pot cooking concept. Invest  in an Instant Pot. You can get them for 30$ on Amazon. Tonnes of quick easy instant pot recipies (even Indian cuisine) out there. If possible learn some basic cooking at home befor you arrive. There will be days when you are too busy to cook. Some cheap places to buy 5$ meals would be Subway or Chipotle. Unless you are in the middle of nowhere you should be able to  find these 2 around near most campuses. If you have roomates team up. Take turns cooking or split chores. One of you do the cooking, the other cleans up.</p>","location":"grad-school/guide-to-grad-school/#eating-to-live"},{"title":"Maintaining a Social Life","text":"<p>Grad life is stressful. Make sure you have a healthy social life to keep your sanity. I personally made sure I took one day off every week to do something fun or just chill. Almost all schools will have a wide variety of clubs for various interests. They also offer recreational courses at discounted prices or at no cost for students. Make use of these. Pick up a new sport, skill or just go explore the neighborhood. There will also be cultural assosciations for each ethnic community. The Indian community in particular is vast. You might as well have a few friends to share the journey with and make some memories. I met my best friends in grad school who are of great support for me till date.</p>","location":"grad-school/guide-to-grad-school/#maintaining-a-social-life"},{"title":"Impostor Syndrome and Mental Health","text":"<p>It's very common to feel like you are not cut out for this. There will inevitably be times when you compare yourself with your peers and feel like I shouldn't be here. Take a deep breath. This is normal and most students experience it at some point in grad school. This is called the impostor syndrome. Remember that people smarter than you and I evaluated your application and deemed you worthy of joining the insitution. Take solace in this fact and keep putting your best effort. Even though not everyone will admit, almost everyone feels this way at some point.</p> <p>Like I said before maintain a good work-life balance to keep your mental health in check. If you feel like things are rough and it's difficult for you to function, immediately seek help. Depending on their experience students often go through bouts of difficult times. Colleges have dedicated mental health counsellors who will be happy to help you through. Mental health isn't a taboo. In fact, no one needs to know. The medical system here is all for privacy and discreteness. It's common for grad students to take a couple months of therapy. This might definitely not be your experience but I wanted to drop a line to reaffirm that there are support systems available for anything you need.</p>","location":"grad-school/guide-to-grad-school/#impostor-syndrome-and-mental-health"},{"title":"On Insurance","text":"<p>As a thumb role don't do anything in the US without insurance. Health insurance is very important. Medical costs in the US are ridiculous pocket burners. There's a common mentality to skimp on this one. Please don't. Even for the smallest medical needs insurance goes a long way. NEVER drive in the US without insurance. It's fine until it no longer is. Even if you are not at fault you need insurance to cover damage to your own vehicle (rental or otherwise). Pay the extra 20$ and save yourself some serious headache.</p>","location":"grad-school/guide-to-grad-school/#on-insurance"},{"title":"COVID-19 Special","text":"<p>With the pandemic going on, campuses have shifted to a hybrid teaching system with options for students to attend lectures remotely. For the next couple years at least I fully expect colleges to have recorded lectures with optional in person attendance. A lot of us have switched to working from home ever since the pandemic. The comfort of rolling out of bed 10 mins before a meeting or class and getting on zoom with your boxers and a hoodie on (Yes we have become this uncouth now :P) is hard to resist. Besides, the rate at which we are running out of greek letters to name the new COVID variants, we're probably going to be doing remote stuff for the next year at a minimum.</p> <p>If you end up working remotely, invest in a good setup. It might be a little bit of expense but trust me it improves productivity like crazy. Make use of the Free and For sale facebook groups your university has to buy a nice table, a decent chair with good back support, a good pair of headphones with mic and a 1080p or above monitor.</p>","location":"grad-school/guide-to-grad-school/#covid-19-special"},{"title":"Misc","text":"<ul> <li>Get a driving license or a state ID in the US. This will allow you to leave your passport safely at home during domestic travel and at other places with ID checks.</li> <li>Most campuses will have zipcars available. You can apply for a membership with your Indian license or any international license for that matter. Use it for car pooling for grocery shopping or learning driving.</li> <li>Almost any CVS or on-campus health center will provide free flu shots during flu season. Take it.</li> <li>A little networking goes a long way in ways you wouldn't foresee. This is something I realized very late in grad school.</li> <li>Loose the mentality to convert every dollar you spend into rupee. While you want to be frugal, if you are constantly calculating expenses in terms of rupee you are in for a nasty shock.</li> </ul>","location":"grad-school/guide-to-grad-school/#misc"},{"title":"Enjoy the ride","text":"<p>Grad school will be one of the most intense and rewarding experiences in your life. For a lot of us this is our first time away from home and the stepping stone to pave our own path  in life. You will experience a wide spectrum of things: late nights studying with friends, last minute submissions, being broke, potlucks, celebrating festivals, crazy parties, a  little bit of drama and gossip, maybe meet someone special ;) You get to experience a new country, different cultures and living life on your own terms. Sure it might be hard and stressful at times, but you will grow as a person and the experience will stay with you forever. When you wear that gown and walk down the aisle to collect your degree, it will all be worth it. Make the most of your grad school experience and absorb everything the place offers :)</p> <p>If you made it this far, thanks for reading this and I hope it was worth your time. If you have any questions or need help feel free to drop a comment or reach out to me via email.</p>","location":"grad-school/guide-to-grad-school/#enjoy-the-ride"},{"title":"Google search tricks","text":"<p>Google search has become the gateway to the internet. Googling requires a knack of using the right keywords to get relevant content. I call this the art of googling. Often times I get asked simple queries which leaves me thinking Why couldn't they  have just googled this. Googling is one of the most under appreciated and under estimated skill.</p> <p>Over the years the quality of Google Search has dropped with the algorithm focusing more on ads and SEO which has enabled content providers to game the system producing irrelevant results. Finding content that is actually relevant has become harder. This article covers some crucial tips for refining your search and utilizing the full power of Google.</p>","location":"how-tos/google-search-tricks/","tags":["Tips"]},{"title":"Google search operators","text":"<p>Google search operators are specific characters and commands that extend the capabilities of basic text searches. Search operators as the term suggests a collection of operators/ args that allow you to tailor your search to exactly what you need.  Below is a small cheatsheet on the different operators and how to use them.</p>","location":"how-tos/google-search-tricks/#google-search-operators","tags":["Tips"]},{"title":"Basic operators","text":"Operator Function     \"\" Use this operator for exact search. For eg. to search only for Model 3 <code>\"tesla model 3\"</code>   | This is the OR operator. For eg. if you want to search for tesla or mercedes <code>tesla \\| mercedes</code>. This is especially useful for multiple word queries as google defaults to AND   - Put - in front of terms(including operators) that you want to exclude from results   * Wildcard operator. For eg. <code>\"the sky is *\"</code>   .. Range operator. Eg. <code>Mercedes cars 2020..2022</code>   () Use this operator to group operators by priority","location":"how-tos/google-search-tricks/#basic-operators","tags":["Tips"]},{"title":"Advanced Operators","text":"Operator Function     intitle: Search only within pages title   allintitle: Show results for all queried words in the title   inurl: Look for a word or phrase in urls of sites   allinurl: Similar to allintitle but for urls   intext: Search for words in body of document   allintext: Similar behavior for all words   filetype: Search for specific file types for eg. ppt, pdf etc   related: Returns results for websites similar to the one queried","location":"how-tos/google-search-tricks/#advanced-operators","tags":["Tips"]},{"title":"Chaining Operators","text":"<p>The search operators unlock an extra level of control over your search results. You can chain together multiple operators to create precise queries. </p>","location":"how-tos/google-search-tricks/#chaining-operators","tags":["Tips"]},{"title":"Procrastination as a productivity hack","text":"<p>Procrastination has always been cliched to be an undesirable quality - one that no one strives for but easily acquires. I however would like to propose an unpopular alternative: prudent procrastination can improve productivity.</p>   <p>If you do it at the last minute, it only takes a minute.</p>","location":"opinions/procrastination-as-a-productivity-hack/","tags":["Productivity"]},{"title":"Parkinson's Law","text":"<p>The notion that work is a rigid entity which takes a constant proportion of time is somewhat misconceived. Work is fluid. Parkinson's law states that work expands to take up any amount of time. The intuition is that, any work can expand to take up more time than is required.</p> <p>Let's say you want to pack for a trip. When you start in advance, you do it leisurely taking your time to choose clothing, shoes, accessories etc. You would probably spend an entire day or distributed over several days for the process. Now, you could have finished the entire process in an hour, but the lack of pressure to finish caused you to spend more time without realizing it. End of the day, you were done packing in advance.  You were content with the sense of accomplishment forgetting the extra hours spent. </p>  <p>Work expands so as to fill the time available for its completion -- Cyril Northcote Parkinson</p>","location":"opinions/procrastination-as-a-productivity-hack/#parkinsons-law","tags":["Productivity"]},{"title":"The problem with timetables","text":"<p>An obvious argument against this is, it can be avoided by allocating time for each task and sticking to a schedule. The vast majority of the population believes that schedules are the best way to be organized. However, it takes enormous amounts of discipline and restraint to stick to it. Probably you had a nice flow of ideas you do not want to interrupt by switching tasks. Or you indulged in a few extra hours of TV. Humans by nature, are susceptible to such vices.</p> <p>As a college student I get bi-weekly assignments. Often times I observed that IF I start an assignment early in the first week, I spent several hours in the next week beautifying the output, formatting code etc, beyond what's necessary. On the other hand, if I started the assignment on the day it's due, I would be done with it in a span of 6-10 hours leading up to the submission.</p>","location":"opinions/procrastination-as-a-productivity-hack/#the-problem-with-timetables","tags":["Productivity"]},{"title":"Procrastination helps","text":"<p>In order to avoid this overflow of time you could enforce certain measures. There was a period of time when I used to work without my charger, so that I would be forced to finish before my laptop shutsdown. However, the most effective measure has been procrastination. When you have limited time left, you are forced to address issues by order of priority. There's no confusion due to overwhelming options. It helps me focus extremely well and my best output has been under pressure. Just like how we could cram an entire subject the night before the exam or finish writing that report overnight.</p> <p></p>","location":"opinions/procrastination-as-a-productivity-hack/#procrastination-helps","tags":["Productivity"]},{"title":"Exercising caution","text":"<p>The key is to think of this idea as intelligently delaying or \"scheduling\" tasks to a time that appropriately constraints it. It's important to be able to accurately judge the time required for completing the task or you run the risk of running short. Err on the side of caution and allot more hours/days if in doubt. It is also easy to go overboard and procrastinate everything causing complete disarray.</p> <p>Personally, this technique has been very effective for me in balancing coursework, research and personal life. It helps me avoid getting bogged down by assignments and allows me to pursue other ideas. If you agree or disagree I would be interested in discussing your opinion. :)</p>","location":"opinions/procrastination-as-a-productivity-hack/#exercising-caution","tags":["Productivity"]},{"title":"Tracking time spent","text":"<p>Time is the most precious resource at our disposal. As someone with ADHD, I tend to get absorbed in tasks that I am excited about and in the process often neglect the less engaging but important tasks. The first step to deal with this is to log how I spend my time. From this I hope to analyze and take measures to better organize my work and utilize my available time wisely.</p> <p>Thankfully, there are several software based solutions available to do this which makes life easier. For my needs, I need an app that's simple to use, stays out of my way for the most part and importantly stores data locally. I have no needs for the bells and whistles that come with the paid apps.</p>","location":"productivity/tracking-time-spent/","tags":["productivity"]},{"title":"Bartib","text":"<p>I came across this CLI utility called Bartib. Bartib is a simple time tracking tool that is accessed via the command line and stores the log of tracked activities in plaintext file locally. It also has the capability to produce reports.</p>","location":"productivity/tracking-time-spent/#bartib","tags":["productivity"]},{"title":"Installation","text":"<p>To install Bartib you need Rust to be installed on your system. If you don't have rust you can install it by running the following command: <code>curl https://sh.rustup.rs -sSf | sh</code></p> <p>To install the app itself: <code>cargo install bartib</code></p> <p>Mac users can skip these steps and directly install it using <code>brew</code>.</p>","location":"productivity/tracking-time-spent/#installation","tags":["productivity"]},{"title":"My Development Setup","text":"<p>Developers have strong personal opinions about the tools they use for programming. Considering we spend a significant amount of time using these tools, a functional development setup is essential for productive programming sessions.</p>  <p>Over the past years I have continuously upgraded my programming setup striving to improve it. I prefer a setup that is easy to configure, minimal, functional and lightweight. As a Machine Learning developer most of my work is in the cloud and for that reason I want my setup to be as portable as possible so that I can easily configure them on any new instance I spawn.</p> <p>As a fan of minimalism my setup simply consists of a terminal, a browser and Roam Research. The tools I use are CLI based and consist of a text editor, a git client and few CLI Rust utilities all of which are Rust apps. Below are the detailed instructions to recreate my setup.</p>","location":"programming/my-development-setup/","tags":["Productivity"]},{"title":"Installing Pre-requisites","text":"<p>First order of business install some basic packages to setup the rest of the env. These include <code>curl, cmake, g++, git</code>. MacOS comes with all of them installed. On linux run <pre><code>sudo apt install -y curl cmake g++ git\n</code></pre></p> <p>Most of my development environment is Rust based and hence we next install Rust with <pre><code>curl https://sh.rustup.rs -sSf | sh\n</code></pre></p> <p>If you are using MacOS, then it is a good idea to install the brew package manager as well. <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre></p> <p>Next we install an archiver utility called ouch for compressing and decompressinf files by running <code>cargo install ouch</code></p>","location":"programming/my-development-setup/#installing-pre-requisites","tags":["Productivity"]},{"title":"Terminal","text":"<p>After experimenting with hyper (which was too heavy) and iterm, I went with Alacritty a Rust based OpenGL terminal emulator that is super fast (Claims to be the fastest temrinal), minimal and ships with sensible defaults. Some of the features include Vi mode for moving around and selections, and built-in search. </p>","location":"programming/my-development-setup/#terminal","tags":["Productivity"]},{"title":"Installation","text":"<p>To install Alacritty run: <pre><code>cargo install alacritty\n</code></pre> Alacritty can be easily configured/extended by specifying the settings in a <code>alacritty.yml</code> file placed in <code>~/.config/alacritty/</code>. Below is my configuration</p> <pre><code>window:\n  padding:\n    x: 25\n    y: 15\n  dynamic_padding: true\n  decorations: buttonless\n  dynamic_title: true\n\nscrolling:\n  history: 100000\n\nfont:\n  size: 13\n  offset:\n    x: 1\n    y: 5\n  normal:\n    family: MonoLisa Nerd Font\n\n# Colors (Gruvbox Material Dark Medium)\ncolors:\n  primary:\n    background: '0x282828'\n    foreground: '0xdfbf8e'\n\n  normal:\n    black:   '0x665c54'\n    red:     '0xea6962'\n    green:   '0xa9b665'\n    yellow:  '0xe78a4e'\n    blue:    '0x7daea3'\n    magenta: '0xd3869b'\n    cyan:    '0x89b482'\n    white:   '0xdfbf8e'\n\n  bright:\n    black:   '0x928374'\n    red:     '0xea6962'\n    green:   '0xa9b665'\n    yellow:  '0xe3a84e'\n    blue:    '0x7daea3'\n    magenta: '0xd3869b'\n    cyan:    '0x89b482'\n    white:   '0xdfbf8e'\n\nkey_bindings:\n- { key: S, mods: Alt, chars: \"\\x1bs\" }\n- { key: C, mods: Alt, chars: \"\\x1bC\" }\n- { key: Period, mods: Alt, chars: \"\\x1b.\" }\n- { key: Semicolon, mods: Alt, chars: \"\\x1b;\" }\n</code></pre>","location":"programming/my-development-setup/#installation","tags":["Productivity"]},{"title":"Editor","text":"<p>For a long time I was using Neovim until I came across helix.  Neovim is fast, lightweight and highly extensible with a rich plugin ecosystem supported by a large community. However, configuring neovim is an arduous process and often takes a several hours of hacking to get it working correctly. This also makes it difficult to recreate the setup on multiple machines.</p> <p>Helix is a Rust based terminal that is refreshingly functional, minimal and fast out of the box. It ships with inbuilt support for Tree-Sitter, LSPs, multiple-cursors, Fuzzy finder, navigation of syntax tree nodes and many more. It has all the functionality I need out of the box without need for any plugins/complex configuration.  Written in Rust, Helix is exceptionally fast and handles large files with ease. Considering it has been around only for a year I find Helix to be impressive. The development community is active and a plugin ecosystem is expected to be implemented in future releases.</p>","location":"programming/my-development-setup/#editor","tags":["Productivity"]},{"title":"Installation","text":"<p>On the MacOS Helix can be installed with <pre><code>brew install helix\n</code></pre></p> <p>On Linux, download the binary from here. Extract the contents and copy the <code>hx</code> binary to <code>~/.local/bin</code> or <code>/usr/opt/bin</code>. If you use the former ensure that <code>~/.local/bin</code> exists in your <code>PATH</code>. Then move the <code>runtime</code> folder to <code>~/.config/helix</code>. As the final step run: <pre><code>hx --grammar fetch\nhx --grammar build\n</code></pre></p> <p>Helix can also be configured like alacritty via a <code>config.toml</code> placed in <code>~/.config/helix/</code>. My config simply installs the gruvbox material theme and the buffer and status lines.</p> <pre><code>theme = \"gruvbox_material_dark_soft\"\n\n[editor]\nbufferline = \"always\"\ncolor-modes = true\ntrue-color = true\n\n[editor.statusline]\nleft = ['mode', 'file-name']\nright = [\"diagnostics\", \"position\", \"total-line-numbers\", \"spacer\", \"file-encoding\", \"file-type\"]\nmode.normal = \"NORMAL\"\nmode.insert = \"INSERT\"\nmode.select = \"SELECT\"\n\n[keys.insert]\nj = { k = \"normal_mode\" }\n\n[keys.normal]\nC-o = \":open ~/.config/helix/config.toml\"\n'$' = \"no_op\"\n'$' = \"goto_line_end\"\n'0' = \"goto_line_start\"\n\n[editor.indent-guides]\nrender = true\n</code></pre>","location":"programming/my-development-setup/#installation_1","tags":["Productivity"]},{"title":"Terminal Multiplexer","text":"<p>Without doubt the most mature and feature-rich terminal multiplexer is tmux. Tmux is lightweight and can be as minimal or feature-rich as you want it to be. It does require a little bit of tweaking to suit my needs but nothing too complex. Tmux is configured by a <code>.tmux.conf</code> file placed in the root directory or inside the <code>~/.config</code></p> <p>There's plenty of open source tmux configs available enabling a variety of features. Below is my configuration  for tmux that I have amassed over several sources to suit my needs. </p> <pre><code># --------#\n# General #\n# --------#\n\n# Default shell\nset -g default-shell $SHELL\n\n# Mouse\nset -g mouse on\n\n# History\nset -g history-limit 102400\n\n# Set windows and page index to base 1\nset -g base-index 1\nsetw -g pane-base-index 1\n\n# Re-number windows when creating/closing new windows\nset -g renumber-windows on\n\n# Use vim key bindings in status line\nset-option -g status-keys vi\n\n# Use vim key bindings in copy mode\nsetw -g mode-keys vi\n\n# Fix ESC delay in vim\nset -g escape-time 10\n\n# ------------#\n# Keybindings #\n# ------------#\n\n# Set prefix to C-a\n# unbind C-b\n# set -g prefix C-a\n\n# Copy-mode\nunbind-key -T copy-mode-vi v\nbind-key -T copy-mode-vi v send-keys -X begin-selection\nbind-key -T copy-mode-vi 'C-v' send-keys -X rectangle-toggle\nbind-key -T copy-mode-vi y send-keys -X copy-pipe \"pbcopy\"\nbind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel \"pbcopy\"\nbind-key -T copy-mode-vi Escape send-keys -X cancel\n\n# Send command on double press\nbind C-a send-prefix\nbind C-l send-keys 'C-l'\n\n# Reload tmux.conf on prefix r\nbind r source-file ~/.tmux.conf \\; display \"Config reloaded!\"\n\n# Split panes and remember current path\nbind '\\' split-window -h -c '#{pane_current_path}'\nbind - split-window -v -c '#{pane_current_path}'\n\n# Remember current path when creating new windows\nbind c new-window -c '#{pane_current_path}'\n\n# Break pane into new window and keep focus on the current window\nbind b break-pane -d\n\n# Smart pane switching with awareness of Vim splits.\nis_vim=\"ps -o state= -o comm= -t '#{pane_tty}' \\\n    | grep -iqE '^[^TXZ ]+ +(\\\\S+\\\\/)?g?(view|n?vim?x?)(diff)?$'\"\nbind-key -n C-h if-shell \"$is_vim\" \"send-keys C-h\"  \"select-pane -L\"\nbind-key -n C-j if-shell \"$is_vim\" \"send-keys C-j\"  \"select-pane -D\"\nbind-key -n C-k if-shell \"$is_vim\" \"send-keys C-k\"  \"select-pane -U\"\nbind-key -n C-l if-shell \"$is_vim\" \"send-keys C-l\"  \"select-pane -R\"\nbind-key -n 'C-\\' if-shell \"$is_vim\" \"send-keys 'C-\\'\" \"select-pane -l\"\nbind-key -T copy-mode-vi C-h select-pane -L\nbind-key -T copy-mode-vi C-j select-pane -D\nbind-key -T copy-mode-vi C-k select-pane -U\nbind-key -T copy-mode-vi C-l select-pane -R\nbind-key -T copy-mode-vi 'C-\\' select-pane -l\n\n# -----------#\n# Status bar #\n# -----------#\n\nset-option -g status-justify left\nset-option -g status-left '#[bg=colour72] #[bg=colour237] #[bg=colour236] #[bg=colour235]#[fg=colour185] #S #[bg=colour236] '\nset-option -g status-left-length 16\nset-option -g status-bg colour237\nset-option -g status-right '#[bg=colour236] #[bg=colour235]#[fg=colour185] %a %R #[bg=colour236]#[fg=colour3] #[bg=colour237] #[bg=colour72] #[]'\nset-option -g status-interval 60\n\nset-option -g pane-active-border-style fg=colour246\nset-option -g pane-border-style fg=colour238\n\nset-window-option -g window-status-format '#[bg=colour238]#[fg=colour107] #I #[bg=colour239]#[fg=colour110] #[bg=colour240]#W#[bg=colour239]#[fg=colour195]#F#[bg=colour238] '\nset-window-option -g window-status-current-format '#[bg=colour236]#[fg=colour215] #I #[bg=colour235]#[fg=colour167] #[bg=colour234]#W#[bg=colour235]#[fg=colour195]#F#[bg=colour236] '\n\nsetw -g monitor-activity on\nset -g visual-activity on\n\n# resize panes\nbind -r h resize-pane -L 5\nbind -r j resize-pane -D 5\nbind -r k resize-pane -U 5\nbind -r l resize-pane -R 5\n</code></pre>","location":"programming/my-development-setup/#terminal-multiplexer","tags":["Productivity"]},{"title":"Git Client","text":"<p>Another essential utility I need is a git client. Although the git CLI provides a rich set of functionality some operations are just easier with a dedicated program. My choice of git client is another Rust based terminal interface app called gitui gitui is blazing fast and supports all features I need.</p> <p>There were a couple things I configured which were the key-bindings and minor tweaks to the UI. The default UI had some readability issues which were easily fixed by changing colors.</p>","location":"programming/my-development-setup/#git-client","tags":["Productivity"]},{"title":"Installation","text":"<p>gitui can be installed from its crate by running <pre><code>cargo install gitui\n</code></pre></p> <p>The key bindings can be configured by putting a <code>key_bindings.ron</code> file in <code>~/.config/gitui</code> and the theme via a <code>theme.ron</code> in the same directory.</p> <p>My <code>key_bindings.ron</code></p> <pre><code>(\n    focus_right: Some(( code: Char('l'), modifiers: ( bits: 0,),)),\n    focus_left: Some(( code: Char('h'), modifiers: ( bits: 0,),)),\n    focus_above: Some(( code: Char('k'), modifiers: ( bits: 0,),)),\n    focus_below: Some(( code: Char('j'), modifiers: ( bits: 0,),)),\n\n    move_left: Some(( code: Char('h'), modifiers: ( bits: 0,),)),\n    move_right: Some(( code: Char('l'), modifiers: ( bits: 0,),)),\n    move_up: Some(( code: Char('k'), modifiers: ( bits: 0,),)),\n    move_down: Some(( code: Char('j'), modifiers: ( bits: 0,),)),\n\n    open_help: Some(( code: F(1), modifiers: ( bits: 0,),)),\n)\n</code></pre> <p>My <code>theme.ron</code></p> <pre><code>(\n    selected_tab: Reset,\n    command_fg: White,\n    selection_bg: Blue,\n    selection_fg: White,\n    cmdbar_bg: Blue,\n    cmdbar_extra_lines_bg: Blue,\n    disabled_fg: DarkGray,\n    diff_line_add: Green,\n    diff_line_delete: Red,\n    diff_file_added: LightGreen,\n    diff_file_removed: LightRed,\n    diff_file_moved: LightMagenta,\n    diff_file_modified: Yellow,\n    commit_hash: Magenta,\n    commit_time: LightCyan,\n    commit_author: Green,\n    danger_fg: Red,\n    push_gauge_bg: Blue,\n    push_gauge_fg: Reset,\n    tag_fg: LightMagenta,\n    branch_fg: LightYellow,\n)\n</code></pre>","location":"programming/my-development-setup/#installation_2","tags":["Productivity"]},{"title":"Terminal Utilities","text":"<p>Apart from the above tools, I like to replace few of the bash commands/apps with a better version of them written in Rust. Some of them are for appearance and some for functionality. All of these apps can be installed via cargo by running <code>cargo install &lt;app-name&gt;</code></p> <ul> <li>Starship is a custom command cross-shell prompt that is minimal, customizable and blazing fast.</li> <li>Add <code>eval \"$(starship init bash)\"</code> to your <code>.bashrc</code></li> <li>xcp is a clone of the Unix <code>cp</code> which is optimized and more efficient.</li> <li>lsd is a rewrite of GNU <code>ls</code> with added features like color, icons, tree-view etc</li> <li>bartib A small command line tool for time tracking</li> <li>topgrade A tool that detects and updates all apps across all package managers</li> </ul>","location":"programming/my-development-setup/#terminal-utilities","tags":["Productivity"]},{"title":"Structuring a Python project","text":"<p>Starting a new python project entails deciding the organizational structure of the project. By structure, I mean organizing the project in a way that produces clean, efficient code and specifing the dependencies required to reproduce the project.</p> <p>In this post I outline a template for setting up new python project that follows Python guidelines and allows you to produce clean code. Along the way I also go into what are the essential components that go into the template.</p>","location":"programming/structuring-a-python-project/","tags":["Programming"]},{"title":"Virtual environments","text":"<p>The first step when starting a new project is to create a new virtual environment. The popular choices are conda, Pip + virtualenv and pipenv. The community is split over which is the better tool. As a Machine Learning developer I personally prefer conda.</p>  Conda vs Pipenv <p>Conda works well for ML development. It's easy to setup environments with different Python versions and it resolves dependencies  automatically and efficiently. Pipenv on the other hand requires additional packages and more steps if you want to use a Python version other than the system default. Moreover it does not always automatically resolve dependencies frequently requiring manual interference.</p> <p>If you are interested to learn more read this</p>  <p>The full conda install is huge (~3GB) and automatically installs over 1500 scientific computing packages. This is overkill for me so I personally prefer Miniconda which is a lean version of conda.</p>","location":"programming/structuring-a-python-project/#virtual-environments","tags":["Programming"]},{"title":"Installation","text":"<p>Download the script from Miniconda website and run <code>bash &lt;script-name&gt;</code>. Windows and Mac users can download the respective installer files available.</p>","location":"programming/structuring-a-python-project/#installation","tags":["Programming"]},{"title":"Usage","text":"<p>There are only a handful of conda commands you need to know and these are listed below:</p> <ul> <li><code>conda create -n &lt;env-name&gt; Python=&lt;version&gt; &lt;additional packages&gt;</code> Creates a new virtualenv with the specified python version and installs additional packages if listed</li> <li><code>conda env list</code> Lists all conda virtual environments</li> <li><code>conda list</code> lists all packages installed in the active environment</li> <li><code>conda activate &lt;env-name&gt;</code> activates the corresponding virtual environment</li> <li><code>conda deactivate</code> deactivates the virtual env</li> <li><code>conda install &lt;package-name&gt;</code> installs the package</li> </ul> <p>Here's a cheatsheet for other commonly used conda commands.</p>","location":"programming/structuring-a-python-project/#usage","tags":["Programming"]},{"title":"Dependency management","text":"<p>My choice for this is Poetry. Poetry is reliable, fast and very easy to use and also seems to be the go-to in the Python community. With inbuilt support for Semantic Versioning Poetry makes it easy to build and publish packages.</p> <p>Installation: <code>conda install -c conda-forge poetry</code></p>","location":"programming/structuring-a-python-project/#dependency-management","tags":["Programming"]},{"title":"Configuration","text":"<p>Poetry can be used to setup a new project directly by running <pre><code>Poetry new &lt;proj-name&gt;\n</code></pre> This pulls up an interactive prompt that steps you through the creation process.  For those who want to avoid this extra effort you can specify the config in a <code>pyproject.toml</code> file. The getting started documentation is neat and easy to follow.</p> <p>Below is my starting template for all my projects: <pre><code>[tool.poetry]\nname = \"&lt;proj-name&gt;\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Rishikanth &lt;r3chandr@ucsd.edu&gt;\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\n\n[tool.poetry.dependencies]\npython = \"^3.9\"\nclick = \"*\"\n\n[tool.poetry.group.dev.dependencies]\nisort = \"*\"\nblack = \"*\"\nflake8 = \"*\"\npytest = \"*\"\npre-commit = \"*\"\npython-lsp-server = \"*\"\nmkdocs-material = \"*\"\nmkdocstrings = \"*\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n\n[tool.poetry.scripts]\n</code></pre></p> <p>The fileds are self-explanatory. Poetry allows you to specify dependencies in groups. The first group <code>tool.poetry.dependencies</code> specifies the dependencies required to build and install the package. The <code>tool.poetry.group.dev.dependencies</code> specifies the dependencies required for development of the package. These dependencies are not essential to use the package.</p> <p>Once you have configured the <code>pyproject.toml</code> running <code>Poetry install</code> will resolve all dependencies and install the specified packages. It also creates a <code>poetry.lock</code> file which carries the information to reproduce the environent.</p>  <p>Tip</p> <p>Ensure that you commit the poetry.lock file. When you want to update packages simply run <code>poetry update</code>. When recreating the environment running <code>poetry install</code> will refer to this lock file and install the exact versions of the packages used by your project.</p>  <p>The dev dependencies I use are described below in detail. Since Poetry will handle the installation we do not need to  manually install each of these packages. Simply specifiying them in <code>pyproject.toml</code> is sufficient</p>","location":"programming/structuring-a-python-project/#configuration","tags":["Programming"]},{"title":"Linter","text":"<p>Code linters analyze code statically to flag programming errors, catch bugs, stylistic errors, and suspicious constructs, using the abstract syntax tree or AST. You can expect a linter to warn you of functions whose complexity needs to be reduced, syntax improvements, code practices that go against configured or standard conventions, etc. My choice of linter is Flake8.</p>","location":"programming/structuring-a-python-project/#linter","tags":["Programming"]},{"title":"Auto-Formatter","text":"<p> Writing neat code can save you hours of frustration and your future version will thank you for doing it. Fortunately there are tools that can do this automatically allowing you to focus on writing code rather than formatting. My opinionated choice of tools are Black for formatting and isort for sorting imports.</p>","location":"programming/structuring-a-python-project/#auto-formatter","tags":["Programming"]},{"title":"Documentation","text":"<p>Writing well documented code is crucial for your own sanity as well as the potential user base. There are a variety of  tools that create professional looking documentation with minimal effort. I go with Material for MkDocs which produces minimal and crisp looking documentation. (This site was also built using the same). In addition to this I also use the mkdocstrings packages to automatically generate documentation from docstrings. I host my documentation on GitHub Pages.</p>","location":"programming/structuring-a-python-project/#documentation","tags":["Programming"]},{"title":"Testing","text":"<p>Testing is an important part of development. The [pytest] framework is the most popular tool for this purpose. This tool allows you to build unit-tests and automatlly runs all test code. Although I have included this in my configuration I seldom use it. My development focuses on ML and I use Click  to generate test binaries that I execute for testing my code.</p>  Note <p>I have added <code>Click</code> to the general dependencies as I'll be using it to build CLI binaries that will be part of the project</p>","location":"programming/structuring-a-python-project/#testing","tags":["Programming"]},{"title":"Automating the pipeline","text":"<p>Now that we have set up all the tools we need to produce clean code we need a mechanism to automatically run these tools on our codebase. Here enters pre-commit a nifty little tool that automates running the various checks (linter, formatter, tests). pre-commit attaches a hook to git and automatically runs these checks everytime you commit code.</p> <p><code>pre-commit</code> can be configured using a <code>.pre-commit-config.yaml</code> file. Below is my config.</p> <pre><code>repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0\n    hooks:\n      - id: check-ast\n      - id: check-merge-conflict\n      - id: check-case-conflict\n      - id: check-docstring-first\n      - id: end-of-file-fixer\n      - id: trailing-whitespace\n      - id: mixed-line-ending\n-   repo: local\n    hooks:\n      - id: isort\n        name: isort\n        entry: poetry run isort\n        language: system\n        types: [python]\n      - id: black\n        name: black\n        entry: poetry run black\n        language: system\n        types: [python]\n      - id: flake8\n        name: flake8\n        entry: poetry run flake8\n        language: system\n        types: [python]\n</code></pre> <p>To install the pre-commit hooks after setting up the config run <code>pre-commit install</code>. From here on anytime you commit to your git repository, pre-commit will automatically run the various checks.</p>","location":"programming/structuring-a-python-project/#automating-the-pipeline","tags":["Programming"]},{"title":"The need for ethics in software","text":"<p>Over the last few years technology has advanced enough to facilitate the most ambitious of crazy ideas which earlier generations thought were impossible. In this process we seem to have lost sight of the ethics behind them.</p>  <p></p>","location":"tech/opinions/the-need-for-ethics-in-software/"},{"title":"Questionable technology","text":"<p>However, the competition and drive for higher profit has resulted in the oversight of  ethical considerations associated with technology. The last few years have witnessed a blatant disregard for privacy of users/consumers from tech giants like Google and Facebook. While this is a serious concern, there's now a more dangerous trend of developing software that infringes on basic human morality. Technology which makes you wonder why they were even built in the first place.</p>","location":"tech/opinions/the-need-for-ethics-in-software/#questionable-technology"},{"title":"DeepNude","text":"<p>Recently a developer by name Alberto built an AI using Neural Networks that generates nudes of woman from clothed pictures of her. Within hours of release the paid app was downloaded over 500,000 times. The app which was designed to work only on images of women reflects the level of misogyny and objectification the developer AND its users have stooped down to. Within days of release, hackers had reverse engineered the algorithm and open-sourced the code on github. Although the app &amp; source were taken down after some much needed backlash, we will never know how many copies are circulating online. When asked why, Alberto said he was excited by the possibility of X-ray glasses.</p>","location":"tech/opinions/the-need-for-ethics-in-software/#deepnude"},{"title":"Adobe VoCo","text":"<p>VoCo is a software that can alter voice recordings to include words or phrases never originally uttered by the speaker. All that is needed for this Neural Network developed by Adobe Research, is a 20 min recording of the speaker.</p> <p>\"We have already revolutionised photo editing. Now it's time for us to do the audio stuff,\" said Adobe's Zeyu Jin after the appalling demo. A company of talented individuals who failed to evalute the ethical issues. Court testimonials, Media, Journalism, Voice Calls... Nothing can ever be trusted again.</p> <p>comments: true</p>","location":"tech/opinions/the-need-for-ethics-in-software/#adobe-voco"},{"title":"Boeing 737 Crash","text":"<p>The Boeing 737 crashes that took away the lives of 100s of people was the direct consequence of conscious poor design choices by the engineering team.  Boeing was under pressure to match its competitors' latest engine. Their newly developed engine couldn't be installed on existing planes due to its larger size. Instead of changing the design, they mounted the engine higher up on the wing messing up the aerodynamics of the aircraft. This would tilt the aircraft upwards causing it to climb up. They developed software ,were im this was detected. The pilots weren't trained about MCAS as the engine needed to be advertised as an upgrade which requires no re-training.   </p> <p>With a slew of poor engineering choices already in the bag, they decided to use only 1 sensor to feed MCAS rather than the 2 available. Since these sensors are not very robust, redundant sensors are usually used to avoid false-positives from erroneous data. But not Boeing. The safety system that analyzed both sensors to indicate errors was offered as a \"paid addon\". In-flight, MCAS wrongly sensed that the aircraft was climbing up and chose to lower a perfectly stable aircraft causing it to crash. With no security system in place and pilots having no knowledge about MCAS they watched the aircraft crash.</p>","location":"tech/opinions/the-need-for-ethics-in-software/#boeing-737-crash"},{"title":"Would you or your family use what you built ?","text":"<p>Would you have someone use the DeepNude algorithm on photos of your daughter ? Would you travel on a plane that doesn't meet safety requirements? Would you or any of your kin use a commodity knowing that it infringes on the privacy &amp; security of users ? If the answer is no(and I hope it is), why release it and prey on ignorant consumers. Make no mistake. This isn't about software bugs or human errors but of conscious choices premediated to infringe on or blatantly ignore basic human rights and morals for the sake of profit. We the developers, researchers and engineers as creators have the responsibility of designing technology that doesn't elicit any harm.</p>","location":"tech/opinions/the-need-for-ethics-in-software/#would-you-or-your-family-use-what-you-built"},{"title":"Need for Policy &amp; Regulation","text":"<p>The internet and software expanse is vast and really has no limits. Anything released on the internet is never truly gone. Speaking from a technical perspective, we can not control the distribution of anything after its release on the internet. We need preventive measures. With an AI revolution predicted, there's an urgent need for new policies &amp; regulations that control development/usage of technology. Software developers and engineers need to step off their geeky bubble and pay heed to the ethical considerations of what they build. A lot of ideas that sound very exciting need to stop at just that.</p>  <p>I keep coming back to the same questions. If my rifle claimed people\u2019s lives, can it be that I\u2026, an Orthodox believer, am to blame for their deaths, even if they are my enemies?</p> <p>-- Mikhail Kalashnikov - Inventor of AK-47</p>","location":"tech/opinions/the-need-for-ethics-in-software/#need-for-policy-regulation"},{"title":"Tags","text":"<p>Following is a list of relevant tags:</p>","location":"tags/"},{"title":"Productivity","text":"<ul> <li>Procrastination as a productivity hack</li> <li>My Development Setup</li> </ul>","location":"tags/#productivity"},{"title":"Programming","text":"<ul> <li>Structuring a Python project</li> </ul>","location":"tags/#programming"},{"title":"Tips","text":"<ul> <li>Google search tricks</li> </ul>","location":"tags/#tips"},{"title":"productivity","text":"<ul> <li>Tracking time spent</li> </ul>","location":"tags/#productivity_1"}]}